{"version":3,"sources":["logic/operate.js","logic/calculate.js","components/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","Error","calculate","obj","buttonName","total","next","match","includes","parseFloat","Calculator","useState","setTotal","setNext","setOperation","onClickHandler","newValue","className","type","onClick","App","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a9465db.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: '',\n      next: '',\n      operation: '',\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: '',\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React, { useState } from 'react';\nimport calculate from '../logic/calculate';\n\n// class Calculator extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       total: '',\n//       next: '',\n//       operation: '',\n//     };\n//     this.onClickHandler = this.onClickHandler.bind(this);\n//   }\n\nconst Calculator = () => {\n  \n  // const setFunctions = {setTotal, setNext, setOperation};\n  const [{total, next, operation}, {setTotal, setNext, setOperation}] = useState({});\n  const obj = {total, next, operation}; \n  \n  const onClickHandler = (newValue) => {\n    if (newValue.total != null) {\n      setTotal(newValue.total);\n    }\n\n    setNext(newValue.next);\n\n    if (newValue.operation != null) {\n      setOperation(newValue.operation);\n    }\n  };\n\n    return (\n      <div className=\"calculator-container\">\n        <div className=\"display-area\">\n          <p className=\"display-results\">\n            { total }\n            { operation }\n            { next }\n          </p>\n        </div>\n        <div className=\"buttons-container\">\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, 'AC')); }}>AC</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '+/-')); }}>+/-</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '%')); }}>%</button>\n          <button type=\"button\" className=\"operator-button\" onClick={() => { onClickHandler(calculate(obj, 'รท')); }}>รท</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '7')); }}>7</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '8')); }}>8</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '9')); }}>9</button>\n          <button type=\"button\" className=\"operator-button\" onClick={() => { onClickHandler(calculate(obj, 'x')); }}>x</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '4')); }}>4</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '5')); }}>5</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '6')); }}>6</button>\n          <button type=\"button\" className=\"operator-button\" onClick={() => { onClickHandler(calculate(obj, '-')); }}>-</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '1')); }}>1</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '2')); }}>2</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '3')); }}>3</button>\n          <button type=\"button\" className=\"operator-button\" onClick={() => { onClickHandler(calculate(obj, '+')); }}>+</button>\n          <button type=\"button\" className=\"calculator-button zero\" onClick={() => { onClickHandler(calculate(obj, '0')); }}>0</button>\n          <button type=\"button\" className=\"calculator-button\" onClick={() => { onClickHandler(calculate(obj, '.')); }}>.</button>\n          <button type=\"button\" className=\"operator-button\" onClick={() => { onClickHandler(calculate(obj, '=')); }}>=</button>\n        </div>\n      </div>\n    );\n  }\n\nexport default Calculator;\n","/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport './App.css';\nimport './components/componentStyles.css';\nimport Calculator from './components/Calculator';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}